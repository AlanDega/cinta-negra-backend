scalar EmailAddress
scalar URL
directive @auth on FIELD_DEFINITION | FIELD 

type Query {
    getSingleClient(id:ID):Client!
    getClients:[Client]!
    getSingleTransaction(id:ID):Transaction!
    getTransactions:[Transaction]!
    me:Client!@auth
}

type Mutation {
    createNewClient(data: ClientInput!):Client!
    updateOneClient(id:ID!, data: ClientUpdateInput!):Client!@auth
    deleteOneClient(id:ID!):String!@auth
    createNewTransaction(data: TransactionInput!):Transaction!
    # @auth
    updateOneTransaction(id:ID!, data: TransactionUpdateInput!):Transaction!@auth
    deleteOneTransaction(id:ID!):String!@auth
    login(email:EmailAddress!, password:String):Auth!
}

type Auth{
    token:String!
    message:String!
}

type Transaction{
    _id:ID!
    currency:TOKENS
    transaction_type: TRANSACTION_TYPE
    client:Client!
}

type Client{
    _id:ID!
    first_name:String!
    last_name:String!
    email:EmailAddress!
    transactions:[Transaction]
    
}

type Wallet {
    btc:Float!
    eth:Float!
    xrp:Float!
    mxn:Float!
    token_balances:TOKEN_BALANCES
}

input TransactionInput{
    currency: TOKENS
    # quantity: Float
    transaction_type: TRANSACTION_TYPE
    # User:String!
}


input ClientInput{
    first_name:String!
    last_name:String!
    email:EmailAddress!
    password: String!
    birth_date:String
    profile_pic:String
}
input WalletUpdateInput{
    btc:Float!
    eth:Float!
    xrp:Float!
    mxn:Float!
    btc_mxn:Float!
    eth_mxn:Float!
    xrp_mxn:Float!
        # is_active:Boolean Pregunta es necesario?


}

input TransactionUpdateInput{
    currency:TOKENS
    transaction_type: TRANSACTION_TYPE
    is_active:Boolean
}

input ClientUpdateInput{
    first_name:String
    last_name:String
    email:EmailAddress
    birth_date:String
    profile_pic:String
    is_active:Boolean
}


type Subscription{
    transaction: TransactionSubscriptionPayload!
}

type TransactionSubscriptionPayload{
    mutation:String!
    data:Transaction!
}

enum TRANSACTION_TYPE {
    COMPRA
    VENTA
}



enum TOKENS {
     BTC
    ETH
    XRP
}

enum TOKEN_BALANCES {
    BTC
    ETH
    XRP
}

